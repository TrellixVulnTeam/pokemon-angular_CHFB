import * as i0 from '@angular/core';
import { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, HostListener, NgModule } from '@angular/core';
import { lockScroll, ariaHideBody, trapTabFocus, unlockScroll, ariaShowBody } from '@ngx-lite/util';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';

class NgxModalComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.closable = true;
        this.type = '';
        this.large = false;
        this.visible = false;
        this.visibleChange = new EventEmitter();
    }
    ngOnChanges(changes) {
        const visible = changes.visible.currentValue;
        if (visible) {
            lockScroll();
            ariaHideBody();
            setTimeout(() => trapTabFocus(this.elementRef.nativeElement), 0); // todo: need to hook into the proper lifecycle
        }
        else {
            unlockScroll();
            ariaShowBody();
        }
        this.visibleChange.emit(this.visible);
    }
    ngOnDestroy() {
        this.cleanUpDOM();
    }
    rootClick(event) {
        if (event && event.target) {
            this.lastFocusedElement = event.target;
        }
    }
    closeOnEscape(event) {
        if (this.closable) {
            this.close();
        }
    }
    closeOnClick(event) {
        const closable = this.closable &&
            event &&
            event.target.className.includes('ngx-modal-closable-target');
        if (closable) {
            this.close();
        }
    }
    close() {
        this.visible = false;
        this.visibleChange.emit(this.visible);
        this.cleanUpDOM();
    }
    cleanUpDOM() {
        unlockScroll();
        ariaShowBody();
        this.focusLastFocusedElement();
    }
    focusLastFocusedElement() {
        if (this.lastFocusedElement) {
            this.lastFocusedElement.focus();
        }
    }
}
NgxModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxModalComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NgxModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.2", type: NgxModalComponent, selector: "ngx-modal", inputs: { closable: "closable", type: "type", large: "large", visible: "visible", templateRef: "templateRef" }, outputs: { visibleChange: "visibleChange" }, host: { listeners: { "document:click": "rootClick($event)", "window:keyup": "closeOnEscape($event)" } }, usesOnChanges: true, ngImport: i0, template: "<dialog role=\"dialog\" [attr.open]=\"visible\" [attr.aria-hidden]=\"!visible\" (click)=\"closeOnClick($event)\" [ngClass]=\"{'hidden': !visible}\"\n  class=\"ngx-modal-overlay ngx-modal-closable-target\">\n  <div class=\"ngx-modal\" role=\"document\">\n    <div class=\"ngx-modal__header\">\n      <ng-content select=\"[ngx-modal-header]\"></ng-content>\n      <button type=\"button\" *ngIf=\"closable\" (click)=\"closeOnClick()\" aria-label=\"close modal\" title=\"close modal\" class=\"ngx-modal__close-btn ngx-modal-closable-target\">\n        <span class=\"ngx-modal__icon-close ngx-modal-closable-target\">&times;</span>\n      </button>\n    </div>\n    <div class=\"ngx-modal__content\">\n      <ng-content *ngIf=\"visible && !templateRef\"></ng-content>\n      <ng-template *ngIf=\"visible && templateRef\" [ngTemplateOutlet]=\"templateRef\"></ng-template>\n    </div>\n    <div class=\"ngx-modal__footer\">\n      <ng-content select=\"[ngx-modal-footer]\"></ng-content>\n    </div>\n  </div>\n</dialog>\n", styles: ["*,:after,:before{box-sizing:border-box}dialog{height:100%;width:100%;border:0;display:block;padding:0;margin:0}.ngx-modal-overlay{display:block;z-index:9999;position:fixed;overflow-x:hidden;overflow-y:auto;right:0;left:0;top:0;bottom:0;background-color:#000000b3}.ngx-modal-overlay.hidden{display:none}.ngx-modal{z-index:2;position:relative;margin:0 auto;min-height:100%;width:100%;background-color:#fff;box-shadow:0 7px 8px -4px #0003,0 13px 19px 2px #00000024,0 5px 24px 4px #0000001f}@media (min-width:720px){.ngx-modal{margin:38px auto;min-height:200px;height:auto;width:90%;max-width:520px}}.ngx-modal__header{min-height:30px}.ngx-modal__content{padding:12px;overflow:hidden;width:100%}.ngx-modal__close-btn{text-decoration:none;display:block;padding:4px 14px;font-size:30px;border:0;cursor:pointer;position:absolute;top:0;right:0;background-color:initial;color:#2d2d2d}.ngx-modal__close-btn:hover{background-color:#f2f2f2}.ngx-modal__close-btn svg{width:20px}ngx-modal [ngx-modal-header]{padding:10px 12px;border-bottom:1px solid #ccc}ngx-modal [ngx-modal-footer]{padding:12px;border-top:1px solid #ccc}"], directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-modal',
                    templateUrl: './ngx-modal.component.html',
                    styleUrls: ['./ngx-modal.component.scss'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { closable: [{
                type: Input
            }], type: [{
                type: Input
            }], large: [{
                type: Input
            }], visible: [{
                type: Input
            }], templateRef: [{
                type: Input
            }], visibleChange: [{
                type: Output
            }], rootClick: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }], closeOnEscape: [{
                type: HostListener,
                args: ['window:keyup', ['$event']]
            }] } });

class NgxModalModule {
}
NgxModalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxModalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgxModalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxModalModule, declarations: [NgxModalComponent], imports: [CommonModule], exports: [NgxModalComponent] });
NgxModalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxModalModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxModalModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [NgxModalComponent],
                    exports: [NgxModalComponent],
                }]
        }] });

/*
 * Public API Surface of ngx-modal
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxModalComponent, NgxModalModule };
//# sourceMappingURL=ngx-lite-modal.js.map
