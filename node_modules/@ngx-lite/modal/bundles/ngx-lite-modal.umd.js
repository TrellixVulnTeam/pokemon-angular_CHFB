(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngx-lite/util'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ngx-lite/modal', ['exports', '@angular/core', '@ngx-lite/util', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-lite'] = global['ngx-lite'] || {}, global['ngx-lite'].modal = {}), global.ng.core, global.util, global.ng.common));
}(this, (function (exports, i0, util, i1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    var NgxModalComponent = /** @class */ (function () {
        function NgxModalComponent(elementRef) {
            this.elementRef = elementRef;
            this.closable = true;
            this.type = '';
            this.large = false;
            this.visible = false;
            this.visibleChange = new i0.EventEmitter();
        }
        NgxModalComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var visible = changes.visible.currentValue;
            if (visible) {
                util.lockScroll();
                util.ariaHideBody();
                setTimeout(function () { return util.trapTabFocus(_this.elementRef.nativeElement); }, 0); // todo: need to hook into the proper lifecycle
            }
            else {
                util.unlockScroll();
                util.ariaShowBody();
            }
            this.visibleChange.emit(this.visible);
        };
        NgxModalComponent.prototype.ngOnDestroy = function () {
            this.cleanUpDOM();
        };
        NgxModalComponent.prototype.rootClick = function (event) {
            if (event && event.target) {
                this.lastFocusedElement = event.target;
            }
        };
        NgxModalComponent.prototype.closeOnEscape = function (event) {
            if (this.closable) {
                this.close();
            }
        };
        NgxModalComponent.prototype.closeOnClick = function (event) {
            var closable = this.closable &&
                event &&
                event.target.className.includes('ngx-modal-closable-target');
            if (closable) {
                this.close();
            }
        };
        NgxModalComponent.prototype.close = function () {
            this.visible = false;
            this.visibleChange.emit(this.visible);
            this.cleanUpDOM();
        };
        NgxModalComponent.prototype.cleanUpDOM = function () {
            util.unlockScroll();
            util.ariaShowBody();
            this.focusLastFocusedElement();
        };
        NgxModalComponent.prototype.focusLastFocusedElement = function () {
            if (this.lastFocusedElement) {
                this.lastFocusedElement.focus();
            }
        };
        return NgxModalComponent;
    }());
    NgxModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxModalComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    NgxModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.2", type: NgxModalComponent, selector: "ngx-modal", inputs: { closable: "closable", type: "type", large: "large", visible: "visible", templateRef: "templateRef" }, outputs: { visibleChange: "visibleChange" }, host: { listeners: { "document:click": "rootClick($event)", "window:keyup": "closeOnEscape($event)" } }, usesOnChanges: true, ngImport: i0__namespace, template: "<dialog role=\"dialog\" [attr.open]=\"visible\" [attr.aria-hidden]=\"!visible\" (click)=\"closeOnClick($event)\" [ngClass]=\"{'hidden': !visible}\"\n  class=\"ngx-modal-overlay ngx-modal-closable-target\">\n  <div class=\"ngx-modal\" role=\"document\">\n    <div class=\"ngx-modal__header\">\n      <ng-content select=\"[ngx-modal-header]\"></ng-content>\n      <button type=\"button\" *ngIf=\"closable\" (click)=\"closeOnClick()\" aria-label=\"close modal\" title=\"close modal\" class=\"ngx-modal__close-btn ngx-modal-closable-target\">\n        <span class=\"ngx-modal__icon-close ngx-modal-closable-target\">&times;</span>\n      </button>\n    </div>\n    <div class=\"ngx-modal__content\">\n      <ng-content *ngIf=\"visible && !templateRef\"></ng-content>\n      <ng-template *ngIf=\"visible && templateRef\" [ngTemplateOutlet]=\"templateRef\"></ng-template>\n    </div>\n    <div class=\"ngx-modal__footer\">\n      <ng-content select=\"[ngx-modal-footer]\"></ng-content>\n    </div>\n  </div>\n</dialog>\n", styles: ["*,:after,:before{box-sizing:border-box}dialog{height:100%;width:100%;border:0;display:block;padding:0;margin:0}.ngx-modal-overlay{display:block;z-index:9999;position:fixed;overflow-x:hidden;overflow-y:auto;right:0;left:0;top:0;bottom:0;background-color:#000000b3}.ngx-modal-overlay.hidden{display:none}.ngx-modal{z-index:2;position:relative;margin:0 auto;min-height:100%;width:100%;background-color:#fff;box-shadow:0 7px 8px -4px #0003,0 13px 19px 2px #00000024,0 5px 24px 4px #0000001f}@media (min-width:720px){.ngx-modal{margin:38px auto;min-height:200px;height:auto;width:90%;max-width:520px}}.ngx-modal__header{min-height:30px}.ngx-modal__content{padding:12px;overflow:hidden;width:100%}.ngx-modal__close-btn{text-decoration:none;display:block;padding:4px 14px;font-size:30px;border:0;cursor:pointer;position:absolute;top:0;right:0;background-color:initial;color:#2d2d2d}.ngx-modal__close-btn:hover{background-color:#f2f2f2}.ngx-modal__close-btn svg{width:20px}ngx-modal [ngx-modal-header]{padding:10px 12px;border-bottom:1px solid #ccc}ngx-modal [ngx-modal-footer]{padding:12px;border-top:1px solid #ccc}"], directives: [{ type: i1__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush, encapsulation: i0__namespace.ViewEncapsulation.None });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ngx-modal',
                        templateUrl: './ngx-modal.component.html',
                        styleUrls: ['./ngx-modal.component.scss'],
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { closable: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], large: [{
                    type: i0.Input
                }], visible: [{
                    type: i0.Input
                }], templateRef: [{
                    type: i0.Input
                }], visibleChange: [{
                    type: i0.Output
                }], rootClick: [{
                    type: i0.HostListener,
                    args: ['document:click', ['$event']]
                }], closeOnEscape: [{
                    type: i0.HostListener,
                    args: ['window:keyup', ['$event']]
                }] } });

    var NgxModalModule = /** @class */ (function () {
        function NgxModalModule() {
        }
        return NgxModalModule;
    }());
    NgxModalModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxModalModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    NgxModalModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxModalModule, declarations: [NgxModalComponent], imports: [i1.CommonModule], exports: [NgxModalComponent] });
    NgxModalModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxModalModule, imports: [[i1.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxModalModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1.CommonModule],
                        declarations: [NgxModalComponent],
                        exports: [NgxModalComponent],
                    }]
            }] });

    /*
     * Public API Surface of ngx-modal
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxModalComponent = NgxModalComponent;
    exports.NgxModalModule = NgxModalModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-lite-modal.umd.js.map
