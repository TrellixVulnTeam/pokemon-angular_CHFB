import { Component, EventEmitter, HostListener, Input, Output, ViewEncapsulation, ChangeDetectionStrategy, } from '@angular/core';
import { trapTabFocus, lockScroll, unlockScroll, ariaHideBody, ariaShowBody, } from '@ngx-lite/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class NgxModalComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.closable = true;
        this.type = '';
        this.large = false;
        this.visible = false;
        this.visibleChange = new EventEmitter();
    }
    ngOnChanges(changes) {
        const visible = changes.visible.currentValue;
        if (visible) {
            lockScroll();
            ariaHideBody();
            setTimeout(() => trapTabFocus(this.elementRef.nativeElement), 0); // todo: need to hook into the proper lifecycle
        }
        else {
            unlockScroll();
            ariaShowBody();
        }
        this.visibleChange.emit(this.visible);
    }
    ngOnDestroy() {
        this.cleanUpDOM();
    }
    rootClick(event) {
        if (event && event.target) {
            this.lastFocusedElement = event.target;
        }
    }
    closeOnEscape(event) {
        if (this.closable) {
            this.close();
        }
    }
    closeOnClick(event) {
        const closable = this.closable &&
            event &&
            event.target.className.includes('ngx-modal-closable-target');
        if (closable) {
            this.close();
        }
    }
    close() {
        this.visible = false;
        this.visibleChange.emit(this.visible);
        this.cleanUpDOM();
    }
    cleanUpDOM() {
        unlockScroll();
        ariaShowBody();
        this.focusLastFocusedElement();
    }
    focusLastFocusedElement() {
        if (this.lastFocusedElement) {
            this.lastFocusedElement.focus();
        }
    }
}
NgxModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxModalComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NgxModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.2", type: NgxModalComponent, selector: "ngx-modal", inputs: { closable: "closable", type: "type", large: "large", visible: "visible", templateRef: "templateRef" }, outputs: { visibleChange: "visibleChange" }, host: { listeners: { "document:click": "rootClick($event)", "window:keyup": "closeOnEscape($event)" } }, usesOnChanges: true, ngImport: i0, template: "<dialog role=\"dialog\" [attr.open]=\"visible\" [attr.aria-hidden]=\"!visible\" (click)=\"closeOnClick($event)\" [ngClass]=\"{'hidden': !visible}\"\n  class=\"ngx-modal-overlay ngx-modal-closable-target\">\n  <div class=\"ngx-modal\" role=\"document\">\n    <div class=\"ngx-modal__header\">\n      <ng-content select=\"[ngx-modal-header]\"></ng-content>\n      <button type=\"button\" *ngIf=\"closable\" (click)=\"closeOnClick()\" aria-label=\"close modal\" title=\"close modal\" class=\"ngx-modal__close-btn ngx-modal-closable-target\">\n        <span class=\"ngx-modal__icon-close ngx-modal-closable-target\">&times;</span>\n      </button>\n    </div>\n    <div class=\"ngx-modal__content\">\n      <ng-content *ngIf=\"visible && !templateRef\"></ng-content>\n      <ng-template *ngIf=\"visible && templateRef\" [ngTemplateOutlet]=\"templateRef\"></ng-template>\n    </div>\n    <div class=\"ngx-modal__footer\">\n      <ng-content select=\"[ngx-modal-footer]\"></ng-content>\n    </div>\n  </div>\n</dialog>\n", styles: ["*,:after,:before{box-sizing:border-box}dialog{height:100%;width:100%;border:0;display:block;padding:0;margin:0}.ngx-modal-overlay{display:block;z-index:9999;position:fixed;overflow-x:hidden;overflow-y:auto;right:0;left:0;top:0;bottom:0;background-color:#000000b3}.ngx-modal-overlay.hidden{display:none}.ngx-modal{z-index:2;position:relative;margin:0 auto;min-height:100%;width:100%;background-color:#fff;box-shadow:0 7px 8px -4px #0003,0 13px 19px 2px #00000024,0 5px 24px 4px #0000001f}@media (min-width:720px){.ngx-modal{margin:38px auto;min-height:200px;height:auto;width:90%;max-width:520px}}.ngx-modal__header{min-height:30px}.ngx-modal__content{padding:12px;overflow:hidden;width:100%}.ngx-modal__close-btn{text-decoration:none;display:block;padding:4px 14px;font-size:30px;border:0;cursor:pointer;position:absolute;top:0;right:0;background-color:initial;color:#2d2d2d}.ngx-modal__close-btn:hover{background-color:#f2f2f2}.ngx-modal__close-btn svg{width:20px}ngx-modal [ngx-modal-header]{padding:10px 12px;border-bottom:1px solid #ccc}ngx-modal [ngx-modal-footer]{padding:12px;border-top:1px solid #ccc}"], directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-modal',
                    templateUrl: './ngx-modal.component.html',
                    styleUrls: ['./ngx-modal.component.scss'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { closable: [{
                type: Input
            }], type: [{
                type: Input
            }], large: [{
                type: Input
            }], visible: [{
                type: Input
            }], templateRef: [{
                type: Input
            }], visibleChange: [{
                type: Output
            }], rootClick: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }], closeOnEscape: [{
                type: HostListener,
                args: ['window:keyup', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1vZGFsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL25neC1tb2RhbC9zcmMvbmd4LW1vZGFsLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uL3Byb2plY3RzL25neC1tb2RhbC9zcmMvbmd4LW1vZGFsLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsWUFBWSxFQUNaLFlBQVksRUFDWixLQUFLLEVBR0wsTUFBTSxFQUdOLGlCQUFpQixFQUNqQix1QkFBdUIsR0FDeEIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUNMLFlBQVksRUFDWixVQUFVLEVBQ1YsWUFBWSxFQUNaLFlBQVksRUFDWixZQUFZLEdBRWIsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBU3hCLE1BQU0sT0FBTyxpQkFBaUI7SUFXNUIsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQVZqQyxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLFNBQUksR0FBRyxFQUFFLENBQUM7UUFDVixVQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2QsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUdoQixrQkFBYSxHQUEwQixJQUFJLFlBQVksRUFBVyxDQUFDO0lBSS9CLENBQUM7SUFFOUMsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBRTdDLElBQUksT0FBTyxFQUFFO1lBQ1gsVUFBVSxFQUFFLENBQUM7WUFDYixZQUFZLEVBQUUsQ0FBQztZQUNmLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLCtDQUErQztTQUNsSDthQUFNO1lBQ0wsWUFBWSxFQUFFLENBQUM7WUFDZixZQUFZLEVBQUUsQ0FBQztTQUNoQjtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBR0QsU0FBUyxDQUFDLEtBQVU7UUFDbEIsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUN6QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztTQUN4QztJQUNILENBQUM7SUFHRCxhQUFhLENBQUMsS0FBb0I7UUFDaEMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNkO0lBQ0gsQ0FBQztJQUVELFlBQVksQ0FBQyxLQUFrQjtRQUM3QixNQUFNLFFBQVEsR0FDWixJQUFJLENBQUMsUUFBUTtZQUNiLEtBQUs7WUFDSixLQUFLLENBQUMsTUFBc0IsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUM5QywyQkFBMkIsQ0FDNUIsQ0FBQztRQUVKLElBQUksUUFBUSxFQUFFO1lBQ1osSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVPLFVBQVU7UUFDaEIsWUFBWSxFQUFFLENBQUM7UUFDZixZQUFZLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFTyx1QkFBdUI7UUFDN0IsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQzs7OEdBM0VVLGlCQUFpQjtrR0FBakIsaUJBQWlCLDRVQy9COUIsdy9CQWtCQTsyRkRhYSxpQkFBaUI7a0JBUDdCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLFdBQVcsRUFBRSw0QkFBNEI7b0JBQ3pDLFNBQVMsRUFBRSxDQUFDLDRCQUE0QixDQUFDO29CQUN6QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEO2lHQUVVLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxPQUFPO3NCQUFmLEtBQUs7Z0JBQ0csV0FBVztzQkFBbkIsS0FBSztnQkFFRyxhQUFhO3NCQURyQixNQUFNO2dCQTJCUCxTQUFTO3NCQURSLFlBQVk7dUJBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLENBQUM7Z0JBUTFDLGFBQWE7c0JBRFosWUFBWTt1QkFBQyxjQUFjLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdExpc3RlbmVyLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE91dHB1dCxcbiAgVGVtcGxhdGVSZWYsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7XG4gIHRyYXBUYWJGb2N1cyxcbiAgbG9ja1Njcm9sbCxcbiAgdW5sb2NrU2Nyb2xsLFxuICBhcmlhSGlkZUJvZHksXG4gIGFyaWFTaG93Qm9keSxcbiAgS2V5Q29kZXMsXG59IGZyb20gJ0BuZ3gtbGl0ZS91dGlsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LW1vZGFsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL25neC1tb2RhbC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL25neC1tb2RhbC5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgTmd4TW9kYWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIGNsb3NhYmxlID0gdHJ1ZTtcbiAgQElucHV0KCkgdHlwZSA9ICcnO1xuICBASW5wdXQoKSBsYXJnZSA9IGZhbHNlO1xuICBASW5wdXQoKSB2aXNpYmxlID0gZmFsc2U7XG4gIEBJbnB1dCgpIHRlbXBsYXRlUmVmPzogVGVtcGxhdGVSZWY8YW55PjtcbiAgQE91dHB1dCgpXG4gIHJlYWRvbmx5IHZpc2libGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICBwcml2YXRlIGxhc3RGb2N1c2VkRWxlbWVudD86IEhUTUxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgY29uc3QgdmlzaWJsZSA9IGNoYW5nZXMudmlzaWJsZS5jdXJyZW50VmFsdWU7XG5cbiAgICBpZiAodmlzaWJsZSkge1xuICAgICAgbG9ja1Njcm9sbCgpO1xuICAgICAgYXJpYUhpZGVCb2R5KCk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHRyYXBUYWJGb2N1cyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCksIDApOyAvLyB0b2RvOiBuZWVkIHRvIGhvb2sgaW50byB0aGUgcHJvcGVyIGxpZmVjeWNsZVxuICAgIH0gZWxzZSB7XG4gICAgICB1bmxvY2tTY3JvbGwoKTtcbiAgICAgIGFyaWFTaG93Qm9keSgpO1xuICAgIH1cblxuICAgIHRoaXMudmlzaWJsZUNoYW5nZS5lbWl0KHRoaXMudmlzaWJsZSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmNsZWFuVXBET00oKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OmNsaWNrJywgWyckZXZlbnQnXSlcbiAgcm9vdENsaWNrKGV2ZW50OiBhbnkpIHtcbiAgICBpZiAoZXZlbnQgJiYgZXZlbnQudGFyZ2V0KSB7XG4gICAgICB0aGlzLmxhc3RGb2N1c2VkRWxlbWVudCA9IGV2ZW50LnRhcmdldDtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6a2V5dXAnLCBbJyRldmVudCddKVxuICBjbG9zZU9uRXNjYXBlKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKHRoaXMuY2xvc2FibGUpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBjbG9zZU9uQ2xpY2soZXZlbnQ/OiBNb3VzZUV2ZW50KSB7XG4gICAgY29uc3QgY2xvc2FibGUgPVxuICAgICAgdGhpcy5jbG9zYWJsZSAmJlxuICAgICAgZXZlbnQgJiZcbiAgICAgIChldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLmNsYXNzTmFtZS5pbmNsdWRlcyhcbiAgICAgICAgJ25neC1tb2RhbC1jbG9zYWJsZS10YXJnZXQnXG4gICAgICApO1xuXG4gICAgaWYgKGNsb3NhYmxlKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy52aXNpYmxlQ2hhbmdlLmVtaXQodGhpcy52aXNpYmxlKTtcbiAgICB0aGlzLmNsZWFuVXBET00oKTtcbiAgfVxuXG4gIHByaXZhdGUgY2xlYW5VcERPTSgpIHtcbiAgICB1bmxvY2tTY3JvbGwoKTtcbiAgICBhcmlhU2hvd0JvZHkoKTtcbiAgICB0aGlzLmZvY3VzTGFzdEZvY3VzZWRFbGVtZW50KCk7XG4gIH1cblxuICBwcml2YXRlIGZvY3VzTGFzdEZvY3VzZWRFbGVtZW50KCkge1xuICAgIGlmICh0aGlzLmxhc3RGb2N1c2VkRWxlbWVudCkge1xuICAgICAgdGhpcy5sYXN0Rm9jdXNlZEVsZW1lbnQuZm9jdXMoKTtcbiAgICB9XG4gIH1cbn1cbiIsIjxkaWFsb2cgcm9sZT1cImRpYWxvZ1wiIFthdHRyLm9wZW5dPVwidmlzaWJsZVwiIFthdHRyLmFyaWEtaGlkZGVuXT1cIiF2aXNpYmxlXCIgKGNsaWNrKT1cImNsb3NlT25DbGljaygkZXZlbnQpXCIgW25nQ2xhc3NdPVwieydoaWRkZW4nOiAhdmlzaWJsZX1cIlxuICBjbGFzcz1cIm5neC1tb2RhbC1vdmVybGF5IG5neC1tb2RhbC1jbG9zYWJsZS10YXJnZXRcIj5cbiAgPGRpdiBjbGFzcz1cIm5neC1tb2RhbFwiIHJvbGU9XCJkb2N1bWVudFwiPlxuICAgIDxkaXYgY2xhc3M9XCJuZ3gtbW9kYWxfX2hlYWRlclwiPlxuICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW25neC1tb2RhbC1oZWFkZXJdXCI+PC9uZy1jb250ZW50PlxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgKm5nSWY9XCJjbG9zYWJsZVwiIChjbGljayk9XCJjbG9zZU9uQ2xpY2soKVwiIGFyaWEtbGFiZWw9XCJjbG9zZSBtb2RhbFwiIHRpdGxlPVwiY2xvc2UgbW9kYWxcIiBjbGFzcz1cIm5neC1tb2RhbF9fY2xvc2UtYnRuIG5neC1tb2RhbC1jbG9zYWJsZS10YXJnZXRcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJuZ3gtbW9kYWxfX2ljb24tY2xvc2Ugbmd4LW1vZGFsLWNsb3NhYmxlLXRhcmdldFwiPiZ0aW1lczs8L3NwYW4+XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwibmd4LW1vZGFsX19jb250ZW50XCI+XG4gICAgICA8bmctY29udGVudCAqbmdJZj1cInZpc2libGUgJiYgIXRlbXBsYXRlUmVmXCI+PC9uZy1jb250ZW50PlxuICAgICAgPG5nLXRlbXBsYXRlICpuZ0lmPVwidmlzaWJsZSAmJiB0ZW1wbGF0ZVJlZlwiIFtuZ1RlbXBsYXRlT3V0bGV0XT1cInRlbXBsYXRlUmVmXCI+PC9uZy10ZW1wbGF0ZT5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwibmd4LW1vZGFsX19mb290ZXJcIj5cbiAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIltuZ3gtbW9kYWwtZm9vdGVyXVwiPjwvbmctY29udGVudD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2RpYWxvZz5cbiJdfQ==