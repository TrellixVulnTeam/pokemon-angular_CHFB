import * as i0 from '@angular/core';
import { EventEmitter, PLATFORM_ID, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Output, Input, ViewChild, HostListener, NgModule } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { fromEvent } from 'rxjs';
import { KeyCodes, trapTabFocus } from '@ngx-lite/util';

class NgxNavDrawerComponent {
    constructor(platformId, changeDetectorRef) {
        this.platformId = platformId;
        this.changeDetectorRef = changeDetectorRef;
        this.openChange = new EventEmitter();
        this.fixed = false;
        this.fixedAtWidth = '1024px';
        this.show = false;
        this.fixedMode = false;
    }
    set open(value) {
        this.show = value;
        this.openChange.emit(this.show);
    }
    ngOnInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.setFixedPosition();
            this.subscription = fromEvent(window, 'resize').subscribe((event) => this.setFixedPosition());
        }
    }
    rootClick(event) {
        this.lastFocusedElement = event.target;
    }
    ngOnChanges() {
        this.focus();
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    outerClick(event) {
        if (event.keyCode === KeyCodes.Escape && this.show === true) {
            this.toggle();
        }
    }
    setFixedPosition() {
        if (isPlatformBrowser(this.platformId)) {
            if (window.matchMedia(`(min-width: ${this.fixedAtWidth})`).matches &&
                this.fixed) {
                this.fixedMode = true;
            }
            else {
                this.fixedMode = false;
            }
            this.changeDetectorRef.detectChanges();
        }
    }
    toggle() {
        if (!this.fixedMode) {
            this.show = !this.show;
            this.openChange.emit(this.show);
        }
        this.focus();
    }
    focus() {
        var _a;
        if (this.show) {
            trapTabFocus((_a = this.nav) === null || _a === void 0 ? void 0 : _a.nativeElement);
        }
        else if (this.lastFocusedElement) {
            this.lastFocusedElement.focus();
        }
    }
}
NgxNavDrawerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxNavDrawerComponent, deps: [{ token: PLATFORM_ID }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NgxNavDrawerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.2", type: NgxNavDrawerComponent, selector: "ngx-nav-drawer", inputs: { open: "open", fixed: "fixed", fixedAtWidth: "fixedAtWidth" }, outputs: { openChange: "openChange" }, host: { listeners: { "document:click": "rootClick($event)", "window:keyup": "outerClick($event)" } }, viewQueries: [{ propertyName: "nav", first: true, predicate: ["nav"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div #nav [class.ngx-nav-drawer-open]=\"show\" [class.ngx-nav-drawer-fixed]=\"fixedMode\">\n  <div class=\"ngx-nav-drawer-overlay\" (click)=\"toggle()\"></div>\n  <nav class=\"ngx-nav-drawer\" (click)=\"toggle()\" [attr.aria-hidden]=\"!show\">\n    <ng-content></ng-content>\n  </nav>\n</div>\n", styles: ["*,:after,:before{box-sizing:border-box}.ngx-nav-drawer-overlay{position:fixed;top:0;left:0;z-index:3;width:100%;height:100%;background:#00000080;display:none}.ngx-nav-drawer{top:0;bottom:0;left:0;width:240px;height:100%;left:-300px;position:fixed;z-index:4;background-color:#fff;overflow-y:auto;transition:left .3s;will-change:left;border-right:1px solid #dbdbdb}.ngx-nav-drawer a,.ngx-nav-drawer button{display:block;padding:18px 13px 16px 26px;font-size:1em;text-decoration:none;font-weight:300;color:#2d2d2d;position:relative;font-weight:700;width:100%;border:0;background:#0000;text-align:left}.ngx-nav-drawer a:active,.ngx-nav-drawer a:focus,.ngx-nav-drawer a:hover,.ngx-nav-drawer button:active,.ngx-nav-drawer button:focus,.ngx-nav-drawer button:hover{background:#f2f2f2}.ngx-nav-drawer-open .ngx-nav-drawer{left:0}.ngx-nav-drawer-open .ngx-nav-drawer-overlay{display:block}.ngx-nav-drawer-fixed .ngx-nav-drawer{left:0}.ngx-nav-drawer-fixed .ngx-nav-drawer-overlay{display:none}"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxNavDrawerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-nav-drawer',
                    templateUrl: './ngx-nav-drawer.component.html',
                    styleUrls: ['./ngx-nav-drawer.component.scss'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { openChange: [{
                type: Output
            }], open: [{
                type: Input
            }], fixed: [{
                type: Input
            }], fixedAtWidth: [{
                type: Input
            }], nav: [{
                type: ViewChild,
                args: ['nav', { static: false }]
            }], rootClick: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }], outerClick: [{
                type: HostListener,
                args: ['window:keyup', ['$event']]
            }] } });

class NgxNavDrawerModule {
}
NgxNavDrawerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxNavDrawerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgxNavDrawerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxNavDrawerModule, declarations: [NgxNavDrawerComponent], imports: [CommonModule], exports: [NgxNavDrawerComponent] });
NgxNavDrawerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxNavDrawerModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxNavDrawerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [NgxNavDrawerComponent],
                    exports: [NgxNavDrawerComponent],
                }]
        }] });

/*
 * Public API Surface of ngx-nav-drawer
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxNavDrawerComponent, NgxNavDrawerModule };
//# sourceMappingURL=ngx-lite-nav-drawer.js.map
