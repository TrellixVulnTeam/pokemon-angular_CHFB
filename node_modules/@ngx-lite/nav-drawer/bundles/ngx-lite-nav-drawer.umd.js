(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('@ngx-lite/util')) :
    typeof define === 'function' && define.amd ? define('@ngx-lite/nav-drawer', ['exports', '@angular/core', '@angular/common', 'rxjs', '@ngx-lite/util'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-lite'] = global['ngx-lite'] || {}, global['ngx-lite']['nav-drawer'] = {}), global.ng.core, global.ng.common, global.rxjs, global.util));
}(this, (function (exports, i0, common, rxjs, util) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var NgxNavDrawerComponent = /** @class */ (function () {
        function NgxNavDrawerComponent(platformId, changeDetectorRef) {
            this.platformId = platformId;
            this.changeDetectorRef = changeDetectorRef;
            this.openChange = new i0.EventEmitter();
            this.fixed = false;
            this.fixedAtWidth = '1024px';
            this.show = false;
            this.fixedMode = false;
        }
        Object.defineProperty(NgxNavDrawerComponent.prototype, "open", {
            set: function (value) {
                this.show = value;
                this.openChange.emit(this.show);
            },
            enumerable: false,
            configurable: true
        });
        NgxNavDrawerComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (common.isPlatformBrowser(this.platformId)) {
                this.setFixedPosition();
                this.subscription = rxjs.fromEvent(window, 'resize').subscribe(function (event) { return _this.setFixedPosition(); });
            }
        };
        NgxNavDrawerComponent.prototype.rootClick = function (event) {
            this.lastFocusedElement = event.target;
        };
        NgxNavDrawerComponent.prototype.ngOnChanges = function () {
            this.focus();
        };
        NgxNavDrawerComponent.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        NgxNavDrawerComponent.prototype.outerClick = function (event) {
            if (event.keyCode === util.KeyCodes.Escape && this.show === true) {
                this.toggle();
            }
        };
        NgxNavDrawerComponent.prototype.setFixedPosition = function () {
            if (common.isPlatformBrowser(this.platformId)) {
                if (window.matchMedia("(min-width: " + this.fixedAtWidth + ")").matches &&
                    this.fixed) {
                    this.fixedMode = true;
                }
                else {
                    this.fixedMode = false;
                }
                this.changeDetectorRef.detectChanges();
            }
        };
        NgxNavDrawerComponent.prototype.toggle = function () {
            if (!this.fixedMode) {
                this.show = !this.show;
                this.openChange.emit(this.show);
            }
            this.focus();
        };
        NgxNavDrawerComponent.prototype.focus = function () {
            var _a;
            if (this.show) {
                util.trapTabFocus((_a = this.nav) === null || _a === void 0 ? void 0 : _a.nativeElement);
            }
            else if (this.lastFocusedElement) {
                this.lastFocusedElement.focus();
            }
        };
        return NgxNavDrawerComponent;
    }());
    NgxNavDrawerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxNavDrawerComponent, deps: [{ token: i0.PLATFORM_ID }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    NgxNavDrawerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.2", type: NgxNavDrawerComponent, selector: "ngx-nav-drawer", inputs: { open: "open", fixed: "fixed", fixedAtWidth: "fixedAtWidth" }, outputs: { openChange: "openChange" }, host: { listeners: { "document:click": "rootClick($event)", "window:keyup": "outerClick($event)" } }, viewQueries: [{ propertyName: "nav", first: true, predicate: ["nav"], descendants: true }], usesOnChanges: true, ngImport: i0__namespace, template: "<div #nav [class.ngx-nav-drawer-open]=\"show\" [class.ngx-nav-drawer-fixed]=\"fixedMode\">\n  <div class=\"ngx-nav-drawer-overlay\" (click)=\"toggle()\"></div>\n  <nav class=\"ngx-nav-drawer\" (click)=\"toggle()\" [attr.aria-hidden]=\"!show\">\n    <ng-content></ng-content>\n  </nav>\n</div>\n", styles: ["*,:after,:before{box-sizing:border-box}.ngx-nav-drawer-overlay{position:fixed;top:0;left:0;z-index:3;width:100%;height:100%;background:#00000080;display:none}.ngx-nav-drawer{top:0;bottom:0;left:0;width:240px;height:100%;left:-300px;position:fixed;z-index:4;background-color:#fff;overflow-y:auto;transition:left .3s;will-change:left;border-right:1px solid #dbdbdb}.ngx-nav-drawer a,.ngx-nav-drawer button{display:block;padding:18px 13px 16px 26px;font-size:1em;text-decoration:none;font-weight:300;color:#2d2d2d;position:relative;font-weight:700;width:100%;border:0;background:#0000;text-align:left}.ngx-nav-drawer a:active,.ngx-nav-drawer a:focus,.ngx-nav-drawer a:hover,.ngx-nav-drawer button:active,.ngx-nav-drawer button:focus,.ngx-nav-drawer button:hover{background:#f2f2f2}.ngx-nav-drawer-open .ngx-nav-drawer{left:0}.ngx-nav-drawer-open .ngx-nav-drawer-overlay{display:block}.ngx-nav-drawer-fixed .ngx-nav-drawer{left:0}.ngx-nav-drawer-fixed .ngx-nav-drawer-overlay{display:none}"], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush, encapsulation: i0__namespace.ViewEncapsulation.None });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxNavDrawerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ngx-nav-drawer',
                        templateUrl: './ngx-nav-drawer.component.html',
                        styleUrls: ['./ngx-nav-drawer.component.scss'],
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }, { type: i0__namespace.ChangeDetectorRef }];
        }, propDecorators: { openChange: [{
                    type: i0.Output
                }], open: [{
                    type: i0.Input
                }], fixed: [{
                    type: i0.Input
                }], fixedAtWidth: [{
                    type: i0.Input
                }], nav: [{
                    type: i0.ViewChild,
                    args: ['nav', { static: false }]
                }], rootClick: [{
                    type: i0.HostListener,
                    args: ['document:click', ['$event']]
                }], outerClick: [{
                    type: i0.HostListener,
                    args: ['window:keyup', ['$event']]
                }] } });

    var NgxNavDrawerModule = /** @class */ (function () {
        function NgxNavDrawerModule() {
        }
        return NgxNavDrawerModule;
    }());
    NgxNavDrawerModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxNavDrawerModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    NgxNavDrawerModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxNavDrawerModule, declarations: [NgxNavDrawerComponent], imports: [common.CommonModule], exports: [NgxNavDrawerComponent] });
    NgxNavDrawerModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxNavDrawerModule, imports: [[common.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: NgxNavDrawerModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule],
                        declarations: [NgxNavDrawerComponent],
                        exports: [NgxNavDrawerComponent],
                    }]
            }] });

    /*
     * Public API Surface of ngx-nav-drawer
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxNavDrawerComponent = NgxNavDrawerComponent;
    exports.NgxNavDrawerModule = NgxNavDrawerModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-lite-nav-drawer.umd.js.map
