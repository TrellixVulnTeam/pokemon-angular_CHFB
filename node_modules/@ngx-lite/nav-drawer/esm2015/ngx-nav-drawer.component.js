import { Component, Input, Output, EventEmitter, ViewEncapsulation, PLATFORM_ID, Inject, HostListener, ViewChild, ChangeDetectionStrategy, } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { fromEvent } from 'rxjs';
import { trapTabFocus, KeyCodes } from '@ngx-lite/util';
import * as i0 from "@angular/core";
export class NgxNavDrawerComponent {
    constructor(platformId, changeDetectorRef) {
        this.platformId = platformId;
        this.changeDetectorRef = changeDetectorRef;
        this.openChange = new EventEmitter();
        this.fixed = false;
        this.fixedAtWidth = '1024px';
        this.show = false;
        this.fixedMode = false;
    }
    set open(value) {
        this.show = value;
        this.openChange.emit(this.show);
    }
    ngOnInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.setFixedPosition();
            this.subscription = fromEvent(window, 'resize').subscribe((event) => this.setFixedPosition());
        }
    }
    rootClick(event) {
        this.lastFocusedElement = event.target;
    }
    ngOnChanges() {
        this.focus();
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    outerClick(event) {
        if (event.keyCode === KeyCodes.Escape && this.show === true) {
            this.toggle();
        }
    }
    setFixedPosition() {
        if (isPlatformBrowser(this.platformId)) {
            if (window.matchMedia(`(min-width: ${this.fixedAtWidth})`).matches &&
                this.fixed) {
                this.fixedMode = true;
            }
            else {
                this.fixedMode = false;
            }
            this.changeDetectorRef.detectChanges();
        }
    }
    toggle() {
        if (!this.fixedMode) {
            this.show = !this.show;
            this.openChange.emit(this.show);
        }
        this.focus();
    }
    focus() {
        var _a;
        if (this.show) {
            trapTabFocus((_a = this.nav) === null || _a === void 0 ? void 0 : _a.nativeElement);
        }
        else if (this.lastFocusedElement) {
            this.lastFocusedElement.focus();
        }
    }
}
NgxNavDrawerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxNavDrawerComponent, deps: [{ token: PLATFORM_ID }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NgxNavDrawerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.2", type: NgxNavDrawerComponent, selector: "ngx-nav-drawer", inputs: { open: "open", fixed: "fixed", fixedAtWidth: "fixedAtWidth" }, outputs: { openChange: "openChange" }, host: { listeners: { "document:click": "rootClick($event)", "window:keyup": "outerClick($event)" } }, viewQueries: [{ propertyName: "nav", first: true, predicate: ["nav"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div #nav [class.ngx-nav-drawer-open]=\"show\" [class.ngx-nav-drawer-fixed]=\"fixedMode\">\n  <div class=\"ngx-nav-drawer-overlay\" (click)=\"toggle()\"></div>\n  <nav class=\"ngx-nav-drawer\" (click)=\"toggle()\" [attr.aria-hidden]=\"!show\">\n    <ng-content></ng-content>\n  </nav>\n</div>\n", styles: ["*,:after,:before{box-sizing:border-box}.ngx-nav-drawer-overlay{position:fixed;top:0;left:0;z-index:3;width:100%;height:100%;background:#00000080;display:none}.ngx-nav-drawer{top:0;bottom:0;left:0;width:240px;height:100%;left:-300px;position:fixed;z-index:4;background-color:#fff;overflow-y:auto;transition:left .3s;will-change:left;border-right:1px solid #dbdbdb}.ngx-nav-drawer a,.ngx-nav-drawer button{display:block;padding:18px 13px 16px 26px;font-size:1em;text-decoration:none;font-weight:300;color:#2d2d2d;position:relative;font-weight:700;width:100%;border:0;background:#0000;text-align:left}.ngx-nav-drawer a:active,.ngx-nav-drawer a:focus,.ngx-nav-drawer a:hover,.ngx-nav-drawer button:active,.ngx-nav-drawer button:focus,.ngx-nav-drawer button:hover{background:#f2f2f2}.ngx-nav-drawer-open .ngx-nav-drawer{left:0}.ngx-nav-drawer-open .ngx-nav-drawer-overlay{display:block}.ngx-nav-drawer-fixed .ngx-nav-drawer{left:0}.ngx-nav-drawer-fixed .ngx-nav-drawer-overlay{display:none}"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxNavDrawerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-nav-drawer',
                    templateUrl: './ngx-nav-drawer.component.html',
                    styleUrls: ['./ngx-nav-drawer.component.scss'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { openChange: [{
                type: Output
            }], open: [{
                type: Input
            }], fixed: [{
                type: Input
            }], fixedAtWidth: [{
                type: Input
            }], nav: [{
                type: ViewChild,
                args: ['nav', { static: false }]
            }], rootClick: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }], outerClick: [{
                type: HostListener,
                args: ['window:keyup', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW5hdi1kcmF3ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvbmd4LW5hdi1kcmF3ZXIvc3JjL25neC1uYXYtZHJhd2VyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uL3Byb2plY3RzL25neC1uYXYtZHJhd2VyL3NyYy9uZ3gtbmF2LWRyYXdlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFHTCxNQUFNLEVBQ04sWUFBWSxFQUNaLGlCQUFpQixFQUVqQixXQUFXLEVBQ1gsTUFBTSxFQUNOLFlBQVksRUFDWixTQUFTLEVBR1QsdUJBQXVCLEdBQ3hCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBRS9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBU3hELE1BQU0sT0FBTyxxQkFBcUI7SUFpQmhDLFlBQytCLFVBQWUsRUFDcEMsaUJBQW9DO1FBRGYsZUFBVSxHQUFWLFVBQVUsQ0FBSztRQUNwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBbEJwQyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQU8xQyxVQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2QsaUJBQVksR0FBRyxRQUFRLENBQUM7UUFHakMsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUNiLGNBQVMsR0FBRyxLQUFLLENBQUM7SUFPZixDQUFDO0lBbEJKLElBQ0ksSUFBSSxDQUFDLEtBQWM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFnQkQsUUFBUTtRQUNOLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNsRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FDeEIsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUdELFNBQVMsQ0FBQyxLQUFVO1FBQ2xCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2YsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7SUFHRCxVQUFVLENBQUMsS0FBVTtRQUNuQixJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtZQUMzRCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDZjtJQUNILENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN0QyxJQUNFLE1BQU0sQ0FBQyxVQUFVLENBQUMsZUFBZSxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxPQUFPO2dCQUM5RCxJQUFJLENBQUMsS0FBSyxFQUNWO2dCQUNBLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO2FBQ3ZCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2FBQ3hCO1lBRUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQztJQUVELE1BQU07UUFDSixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakM7UUFFRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZixDQUFDO0lBRUQsS0FBSzs7UUFDSCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDYixZQUFZLENBQUMsTUFBQSxJQUFJLENBQUMsR0FBRywwQ0FBRSxhQUFhLENBQUMsQ0FBQztTQUN2QzthQUFNLElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQ2xDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7O2tIQW5GVSxxQkFBcUIsa0JBa0J0QixXQUFXO3NHQWxCVixxQkFBcUIsNFhDN0JsQyx3U0FNQTsyRkR1QmEscUJBQXFCO2tCQVBqQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFdBQVcsRUFBRSxpQ0FBaUM7b0JBQzlDLFNBQVMsRUFBRSxDQUFDLGlDQUFpQyxDQUFDO29CQUM5QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzswQkFtQkksTUFBTTsyQkFBQyxXQUFXOzRFQWpCWCxVQUFVO3NCQUFuQixNQUFNO2dCQUVILElBQUk7c0JBRFAsS0FBSztnQkFNRyxLQUFLO3NCQUFiLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSztnQkFDK0IsR0FBRztzQkFBdkMsU0FBUzt1QkFBQyxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO2dCQXNCbkMsU0FBUztzQkFEUixZQUFZO3VCQUFDLGdCQUFnQixFQUFFLENBQUMsUUFBUSxDQUFDO2dCQWdCMUMsVUFBVTtzQkFEVCxZQUFZO3VCQUFDLGNBQWMsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT25EZXN0cm95LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBQTEFURk9STV9JRCxcbiAgSW5qZWN0LFxuICBIb3N0TGlzdGVuZXIsXG4gIFZpZXdDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgT25DaGFuZ2VzLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBmcm9tRXZlbnQsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyB0cmFwVGFiRm9jdXMsIEtleUNvZGVzIH0gZnJvbSAnQG5neC1saXRlL3V0aWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtbmF2LWRyYXdlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9uZ3gtbmF2LWRyYXdlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL25neC1uYXYtZHJhd2VyLmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hOYXZEcmF3ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0IHtcbiAgQE91dHB1dCgpIG9wZW5DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG4gIEBJbnB1dCgpXG4gIHNldCBvcGVuKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5zaG93ID0gdmFsdWU7XG4gICAgdGhpcy5vcGVuQ2hhbmdlLmVtaXQodGhpcy5zaG93KTtcbiAgfVxuXG4gIEBJbnB1dCgpIGZpeGVkID0gZmFsc2U7XG4gIEBJbnB1dCgpIGZpeGVkQXRXaWR0aCA9ICcxMDI0cHgnO1xuICBAVmlld0NoaWxkKCduYXYnLCB7IHN0YXRpYzogZmFsc2UgfSkgbmF2PzogRWxlbWVudFJlZjtcblxuICBzaG93ID0gZmFsc2U7XG4gIGZpeGVkTW9kZSA9IGZhbHNlO1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbj86IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBsYXN0Rm9jdXNlZEVsZW1lbnQ/OiBIVE1MRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IGFueSxcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZlxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHRoaXMuc2V0Rml4ZWRQb3NpdGlvbigpO1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBmcm9tRXZlbnQod2luZG93LCAncmVzaXplJykuc3Vic2NyaWJlKChldmVudCkgPT5cbiAgICAgICAgdGhpcy5zZXRGaXhlZFBvc2l0aW9uKClcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6Y2xpY2snLCBbJyRldmVudCddKVxuICByb290Q2xpY2soZXZlbnQ6IGFueSkge1xuICAgIHRoaXMubGFzdEZvY3VzZWRFbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5mb2N1cygpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzprZXl1cCcsIFsnJGV2ZW50J10pXG4gIG91dGVyQ2xpY2soZXZlbnQ6IGFueSkge1xuICAgIGlmIChldmVudC5rZXlDb2RlID09PSBLZXlDb2Rlcy5Fc2NhcGUgJiYgdGhpcy5zaG93ID09PSB0cnVlKSB7XG4gICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgIH1cbiAgfVxuXG4gIHNldEZpeGVkUG9zaXRpb24oKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgd2luZG93Lm1hdGNoTWVkaWEoYChtaW4td2lkdGg6ICR7dGhpcy5maXhlZEF0V2lkdGh9KWApLm1hdGNoZXMgJiZcbiAgICAgICAgdGhpcy5maXhlZFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZml4ZWRNb2RlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZml4ZWRNb2RlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgfVxuXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAoIXRoaXMuZml4ZWRNb2RlKSB7XG4gICAgICB0aGlzLnNob3cgPSAhdGhpcy5zaG93O1xuICAgICAgdGhpcy5vcGVuQ2hhbmdlLmVtaXQodGhpcy5zaG93KTtcbiAgICB9XG5cbiAgICB0aGlzLmZvY3VzKCk7XG4gIH1cblxuICBmb2N1cygpIHtcbiAgICBpZiAodGhpcy5zaG93KSB7XG4gICAgICB0cmFwVGFiRm9jdXModGhpcy5uYXY/Lm5hdGl2ZUVsZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sYXN0Rm9jdXNlZEVsZW1lbnQpIHtcbiAgICAgIHRoaXMubGFzdEZvY3VzZWRFbGVtZW50LmZvY3VzKCk7XG4gICAgfVxuICB9XG59XG4iLCI8ZGl2ICNuYXYgW2NsYXNzLm5neC1uYXYtZHJhd2VyLW9wZW5dPVwic2hvd1wiIFtjbGFzcy5uZ3gtbmF2LWRyYXdlci1maXhlZF09XCJmaXhlZE1vZGVcIj5cbiAgPGRpdiBjbGFzcz1cIm5neC1uYXYtZHJhd2VyLW92ZXJsYXlcIiAoY2xpY2spPVwidG9nZ2xlKClcIj48L2Rpdj5cbiAgPG5hdiBjbGFzcz1cIm5neC1uYXYtZHJhd2VyXCIgKGNsaWNrKT1cInRvZ2dsZSgpXCIgW2F0dHIuYXJpYS1oaWRkZW5dPVwiIXNob3dcIj5cbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gIDwvbmF2PlxuPC9kaXY+XG4iXX0=