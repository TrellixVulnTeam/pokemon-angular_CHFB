(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define('@ngx-lite/util', ['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-lite'] = global['ngx-lite'] || {}, global['ngx-lite'].util = {})));
}(this, (function (exports) { 'use strict';

    exports.KeyCodes = void 0;
    (function (KeyCodes) {
        KeyCodes[KeyCodes["LeftArrow"] = 37] = "LeftArrow";
        KeyCodes[KeyCodes["UpArrow"] = 38] = "UpArrow";
        KeyCodes[KeyCodes["RightArrow"] = 39] = "RightArrow";
        KeyCodes[KeyCodes["DownArrow"] = 40] = "DownArrow";
        KeyCodes[KeyCodes["Backspace"] = 8] = "Backspace";
        KeyCodes[KeyCodes["Tab"] = 9] = "Tab";
        KeyCodes[KeyCodes["Enter"] = 13] = "Enter";
        KeyCodes[KeyCodes["Escape"] = 27] = "Escape";
    })(exports.KeyCodes || (exports.KeyCodes = {}));
    function trapTabFocus(elm) {
        var focusableEls = elm.querySelectorAll('a, object, input, button, iframe, [tabindex]');
        var firstFocusableEl = focusableEls[0];
        var lastFocusableEl = focusableEls[focusableEls.length - 1];
        // if just a single focusable item focus it
        if (firstFocusableEl) {
            firstFocusableEl.focus();
        }
        // if two or more focusable items create focus loop
        if (firstFocusableEl && lastFocusableEl) {
            elm.addEventListener('keydown', function (e) {
                if (e.key !== 'Tab') {
                    return;
                }
                if (e.shiftKey && document.activeElement === firstFocusableEl) {
                    lastFocusableEl.focus();
                    e.preventDefault();
                }
                else {
                    if (document.activeElement === lastFocusableEl) {
                        firstFocusableEl.focus();
                        e.preventDefault();
                    }
                }
            });
        }
    }
    function isBrowser() {
        return typeof window !== 'undefined';
    }
    function lockScroll() {
        if (isBrowser()) {
            document.body.style.overflow = 'hidden';
        }
    }
    function unlockScroll() {
        if (isBrowser()) {
            document.body.style.overflow = 'initial';
        }
    }
    function ariaHideBody() {
        if (isBrowser()) {
            document.body.setAttribute('aria-hidden', 'true');
        }
    }
    function ariaShowBody() {
        if (isBrowser()) {
            document.body.setAttribute('aria-hidden', 'false');
        }
    }

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ariaHideBody = ariaHideBody;
    exports.ariaShowBody = ariaShowBody;
    exports.isBrowser = isBrowser;
    exports.lockScroll = lockScroll;
    exports.trapTabFocus = trapTabFocus;
    exports.unlockScroll = unlockScroll;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-lite-util.umd.js.map
